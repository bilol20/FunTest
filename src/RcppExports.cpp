// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// inp
double inp(NumericVector x, NumericVector y, NumericVector time);
RcppExport SEXP _FunTest_inp(SEXP xSEXP, SEXP ySEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(inp(x, y, time));
    return rcpp_result_gen;
END_RCPP
}
// median_huristic
List median_huristic(List list, NumericVector time);
RcppExport SEXP _FunTest_median_huristic(SEXP listSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type list(listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(median_huristic(list, time));
    return rcpp_result_gen;
END_RCPP
}
// median_huristic_2
List median_huristic_2(List list, NumericVector time);
RcppExport SEXP _FunTest_median_huristic_2(SEXP listSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type list(listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(median_huristic_2(list, time));
    return rcpp_result_gen;
END_RCPP
}
// proj_cpp
NumericMatrix proj_cpp(NumericMatrix x, NumericVector argval);
RcppExport SEXP _FunTest_proj_cpp(SEXP xSEXP, SEXP argvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type argval(argvalSEXP);
    rcpp_result_gen = Rcpp::wrap(proj_cpp(x, argval));
    return rcpp_result_gen;
END_RCPP
}
// perm
NumericVector perm(int n);
RcppExport SEXP _FunTest_perm(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(perm(n));
    return rcpp_result_gen;
END_RCPP
}
// summat
double summat(NumericMatrix A);
RcppExport SEXP _FunTest_summat(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(summat(A));
    return rcpp_result_gen;
END_RCPP
}
// sumvec
double sumvec(NumericVector A);
RcppExport SEXP _FunTest_sumvec(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(sumvec(A));
    return rcpp_result_gen;
END_RCPP
}
// colSum_cpp
NumericVector colSum_cpp(NumericMatrix A);
RcppExport SEXP _FunTest_colSum_cpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(colSum_cpp(A));
    return rcpp_result_gen;
END_RCPP
}
// operation1
NumericMatrix operation1(NumericMatrix l, NumericMatrix A);
RcppExport SEXP _FunTest_operation1(SEXP lSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type l(lSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(operation1(l, A));
    return rcpp_result_gen;
END_RCPP
}
// operation2
NumericVector operation2(NumericVector l, NumericVector A);
RcppExport SEXP _FunTest_operation2(SEXP lSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(operation2(l, A));
    return rcpp_result_gen;
END_RCPP
}
// g_cpp
double g_cpp(List K);
RcppExport SEXP _FunTest_g_cpp(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(g_cpp(K));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_kernel
NumericMatrix gaussian_kernel(NumericVector x, double b);
RcppExport SEXP _FunTest_gaussian_kernel(SEXP xSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_kernel(x, b));
    return rcpp_result_gen;
END_RCPP
}
// stat
double stat(List D, double b);
RcppExport SEXP _FunTest_stat(SEXP DSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(stat(D, b));
    return rcpp_result_gen;
END_RCPP
}
// stat_2
double stat_2(List D, List b);
RcppExport SEXP _FunTest_stat_2(SEXP DSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type D(DSEXP);
    Rcpp::traits::input_parameter< List >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_2(D, b));
    return rcpp_result_gen;
END_RCPP
}
// rowcolsam
NumericMatrix rowcolsam(NumericMatrix A);
RcppExport SEXP _FunTest_rowcolsam(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(rowcolsam(A));
    return rcpp_result_gen;
END_RCPP
}
// permutation
NumericVector permutation(List D, int R, double b);
RcppExport SEXP _FunTest_permutation(SEXP DSEXP, SEXP RSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(permutation(D, R, b));
    return rcpp_result_gen;
END_RCPP
}
// permutation_2
NumericVector permutation_2(List D, int R, List b);
RcppExport SEXP _FunTest_permutation_2(SEXP DSEXP, SEXP RSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< List >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(permutation_2(D, R, b));
    return rcpp_result_gen;
END_RCPP
}
// multi_permutation
NumericMatrix multi_permutation(List D, int R, NumericVector b);
RcppExport SEXP _FunTest_multi_permutation(SEXP DSEXP, SEXP RSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_permutation(D, R, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FunTest_inp", (DL_FUNC) &_FunTest_inp, 3},
    {"_FunTest_median_huristic", (DL_FUNC) &_FunTest_median_huristic, 2},
    {"_FunTest_median_huristic_2", (DL_FUNC) &_FunTest_median_huristic_2, 2},
    {"_FunTest_proj_cpp", (DL_FUNC) &_FunTest_proj_cpp, 2},
    {"_FunTest_perm", (DL_FUNC) &_FunTest_perm, 1},
    {"_FunTest_summat", (DL_FUNC) &_FunTest_summat, 1},
    {"_FunTest_sumvec", (DL_FUNC) &_FunTest_sumvec, 1},
    {"_FunTest_colSum_cpp", (DL_FUNC) &_FunTest_colSum_cpp, 1},
    {"_FunTest_operation1", (DL_FUNC) &_FunTest_operation1, 2},
    {"_FunTest_operation2", (DL_FUNC) &_FunTest_operation2, 2},
    {"_FunTest_g_cpp", (DL_FUNC) &_FunTest_g_cpp, 1},
    {"_FunTest_gaussian_kernel", (DL_FUNC) &_FunTest_gaussian_kernel, 2},
    {"_FunTest_stat", (DL_FUNC) &_FunTest_stat, 2},
    {"_FunTest_stat_2", (DL_FUNC) &_FunTest_stat_2, 2},
    {"_FunTest_rowcolsam", (DL_FUNC) &_FunTest_rowcolsam, 1},
    {"_FunTest_permutation", (DL_FUNC) &_FunTest_permutation, 3},
    {"_FunTest_permutation_2", (DL_FUNC) &_FunTest_permutation_2, 3},
    {"_FunTest_multi_permutation", (DL_FUNC) &_FunTest_multi_permutation, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_FunTest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
